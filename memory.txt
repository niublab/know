ESS Community 自动部署脚本 - 待改进问题记录
==============================================

记录时间：2025年6月14日
脚本版本：1.0.0

问题1：域名输入方式需要优化
--------------------
当前问题：
- 提示"请输入 Synapse 域名 (例如: matrix.example.com)"需要输入完整子域名
- 用户体验不好，需要重复输入主域名部分
- 容易出错，用户可能输入不一致的主域名
- 不够灵活，批量修改域名很麻烦

改进方案：
方案A：先输入主域名，再输入子域名前缀
方案B：主域名+默认子域名前缀（可自定义）

影响范围：
- create_basic_config() 函数
- 所有域名输入相关的交互
- 配置文件生成逻辑

优先级：中等
状态：待处理

问题2：wellKnownDelegation.ingress配置错误
------------------------------------
错误信息：
- wellKnownDelegation.ingress: Additional property host is not allowed
- Helm部署失败，values文件不符合schema规范

当前错误配置：
wellKnownDelegation:
  ingress:
    host: example.com  # 这个配置不被允许

问题分析：
- ESS 25.6.1版本的schema可能已经改变
- wellKnownDelegation的ingress配置方式可能不同于其他组件
- 需要查看官方values.yaml中wellKnownDelegation的正确配置格式

解决方案：
1. 检查官方values.yaml中wellKnownDelegation的正确配置
2. 修改create_basic_config()函数中的配置生成
3. 可能需要移除wellKnownDelegation.ingress.host配置

影响范围：
- create_basic_config() 函数
- hostnames.yaml 配置文件生成

优先级：高（阻塞部署）
状态：已解决

问题3：第二阶段改造策略调整
------------------------
重要发现：
- 域名配置在第一阶段部署后已固定，无法简单修改
- 需要先验证第一阶段部署是否完全成功
- 第二阶段改造重点应该调整

当前优先级：
1. 验证第一阶段部署状态（内网验证）
2. 确认所有组件正常运行
3. 重新评估第二阶段改造范围

第二阶段改造调整后的重点：
- 端口配置自定义（8080/8443/8448等）
- 外部nginx反代支持
- 多级清理功能
- 配置管理和重用
- 错误处理增强
- DDNS支持

域名相关：
- 域名自定义已失去意义（除非重新部署）
- 记录到memory.txt中的域名输入优化可以用于新部署

优先级：高
状态：需要先验证部署

问题4：第一阶段部署验证结果分析
----------------------------
部署时间：约7分钟前
域名：niub.win (主域名)

✅ 成功的组件：
- K3s集群：运行正常
- cert-manager：运行正常
- ESS命名空间：已创建
- Helm部署：成功
- Pod状态：大部分运行正常
  - ess-element-web: 运行中 (1/1)
  - ess-matrix-authentication-service: 运行中 (1/1)
  - ess-haproxy: 运行中 (1/1)
  - ess-matrix-rtc-*: 运行中
  - ess-synapse-main: 运行中 (1/1)
  - ess-postgres: 运行中 (3/3)

❌ 需要关注的问题：
- 所有证书状态：False (READY=False)
- 证书申请可能还在进行中或失败

🔍 需要进一步检查：
1. 证书申请详细状态和错误信息
2. Cloudflare DNS验证是否正常
3. 域名DNS解析是否正确配置

📋 Ingress配置正确：
- app.niub.win (Element Web)
- mas.niub.win (MAS)
- rtc.niub.win (Matrix RTC)
- matrix.niub.win (Synapse)
- niub.win (Well-known)

下一步：检查证书申请失败原因

问题5：第一阶段部署详细问题分析
----------------------------
✅ 证书申请状态：正常进行中
- ClusterIssuer: 正常 (ACMEAccountRegistered)
- 证书申请: 正在进行 (Issuing状态)
- DNS解析: 正常 (app.niub.win -> 114.252.225.199)

❌ 发现的问题：
1. Pod启动问题：
   - ConfigMap/Secret缓存同步超时
   - 多个组件启动探针失败
   - HAProxy返回429状态码

2. 网络连接问题：
   - 内网IP 10.0.0.251:443 无法连接
   - 可能是Traefik/HAProxy配置问题

🔍 需要检查：
1. Traefik服务状态和配置
2. HAProxy配置和日志
3. K3s网络配置

📋 当前网络配置：
- 外网IP: 114.252.225.199
- 内网IP: 10.0.0.251 (Traefik LoadBalancer)
- DNS解析: 正常

根本问题：可能是K3s网络或Traefik配置问题

问题6：ISP端口封锁问题（关键发现）
------------------------------
重要发现：
- ISP封锁了80/443端口
- 当前部署使用默认80/443端口，无法从外网访问
- 内网10.0.0.251:443也无法连接，说明Traefik配置的是标准端口

影响：
- 外网无法访问ESS服务
- 证书HTTP-01验证无法工作（已改为DNS验证，这个OK）
- 需要改为自定义端口（8080/8443等）

解决方案：
1. 修改K3s Traefik配置使用8080/8443端口
2. 或者配置外部nginx反代
3. 更新Ingress配置适配新端口

这正好是第二阶段改造的核心需求！

技术方案：
- 方案A：修改Traefik端口配置
- 方案B：外部nginx反代到内网端口
- 方案C：重新部署时指定自定义端口

优先级：最高（阻塞外网访问）
状态：需要立即解决

问题7：DNS验证失败根本原因确认
----------------------------
关键发现：
- cert-manager无法在Cloudflare创建DNS验证记录
- dig查询显示_acme-challenge记录不存在（NXDOMAIN）
- 域名在Cloudflare托管（SOA显示cloudflare.com）
- API Token Secret存在但可能权限不足

具体错误：
- 所有域名的DNS验证记录都未创建
- cert-manager持续报告"DNS record not yet propagated"
- 15分钟内一直失败，说明不是传播延迟问题

可能原因：
1. Cloudflare API Token权限不足
2. API Token无效或过期
3. Zone ID问题（虽然说不需要）
4. cert-manager与Cloudflare API通信问题

下一步诊断：
1. 验证API Token有效性
2. 检查cert-manager是否能连接Cloudflare API
3. 查看更详细的cert-manager日志

优先级：最高（阻塞证书申请）
状态：需要立即解决API Token问题

问题8：脚本配置覆盖错误（严重bug）
------------------------------
发现的问题：
- create_basic_config()函数硬编码tls.yaml为letsencrypt-prod
- configure_cloudflare_dns()函数动态生成tls.yaml为$issuer_name
- 执行顺序导致正确配置被错误配置覆盖

具体错误：
1. configure_cloudflare_dns() 创建正确的tls.yaml（支持staging/prod选择）
2. create_basic_config() 覆盖为硬编码的letsencrypt-prod
3. 导致用户选择的证书环境被忽略

影响：
- 证书申请延迟（配置不一致）
- 用户选择被忽略（总是使用生产环境）
- 可能导致Let's Encrypt频率限制

解决方案：
- 从create_basic_config()中移除tls.yaml生成
- 或者修改为使用动态变量
- 确保配置一致性

优先级：最高（严重bug）
状态：需要立即修复

==============================================
