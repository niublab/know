#!/bin/bash

# Element ESS Admin管理工具系统命令包装器
# 将Python管理工具包装成系统命令

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ADMIN_SCRIPT="/usr/local/bin/element_admin.py"
SERVICE_NAME="admin"
ADMIN_PORT="${ADMIN_TOOL_PORT:-8888}"

# 颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 帮助信息
show_help() {
    cat << EOF
Element ESS Admin管理工具

用法: admin [COMMAND] [OPTIONS]

命令:
    start           启动管理工具服务
    stop            停止管理工具服务
    restart         重启管理工具服务
    status          查看服务状态
    logs            查看运行日志
    web             在浏览器中打开管理界面
    user            用户管理
    service         服务管理
    backup          备份管理
    install         安装管理工具到系统
    uninstall       从系统卸载管理工具
    version         显示版本信息

选项:
    --port PORT     指定监听端口 (默认: 8888)
    --help          显示此帮助信息

示例:
    admin start --port 9000    # 在端口9000启动服务
    admin status               # 查看服务状态
    admin user list            # 列出所有用户
    admin service restart synapse  # 重启Synapse服务

更多信息请访问: https://github.com/element-hq/ess-helm
EOF
}

# 检查是否已安装
check_installation() {
    if [[ ! -f "$ADMIN_SCRIPT" ]]; then
        echo -e "${RED}错误: Admin工具未安装。请先运行 'admin install'${NC}"
        exit 1
    fi
}

# 安装管理工具
install_admin() {
    echo -e "${BLUE}安装Element ESS Admin管理工具...${NC}"
    
    # 检查权限
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}错误: 安装需要root权限${NC}"
        exit 1
    fi
    
    # 复制Python脚本
    if [[ -f "${SCRIPT_DIR}/element_admin.py" ]]; then
        cp "${SCRIPT_DIR}/element_admin.py" "$ADMIN_SCRIPT"
        chmod +x "$ADMIN_SCRIPT"
        echo -e "${GREEN}✓ 已复制管理脚本到 $ADMIN_SCRIPT${NC}"
    else
        echo -e "${RED}错误: 找不到element_admin.py文件${NC}"
        exit 1
    fi
    
    # 创建systemd服务文件
    cat > "/etc/systemd/system/${SERVICE_NAME}.service" << EOF
[Unit]
Description=Element ESS Admin Management Tool
Documentation=https://github.com/element-hq/ess-helm
After=network-online.target docker.service
Wants=network-online.target
Requires=docker.service

[Service]
Type=simple
User=root
Group=root
ExecStart=/usr/bin/python3 $ADMIN_SCRIPT --port $ADMIN_PORT --host 0.0.0.0
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

# 环境变量
Environment=PYTHONUNBUFFERED=1
Environment=FLASK_ENV=production
EnvironmentFile=-/opt/element-ess/.env

# 安全设置
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ReadWritePaths=/opt/element-ess /var/log

# 资源限制
LimitNOFILE=65536
MemoryMax=512M
CPUQuota=50%

[Install]
WantedBy=multi-user.target
EOF
    
    # 安装Python依赖
    echo -e "${BLUE}安装Python依赖...${NC}"
    pip3 install flask pyjwt requests pyyaml werkzeug
    
    # 重载systemd并启用服务
    systemctl daemon-reload
    systemctl enable "${SERVICE_NAME}"
    
    echo -e "${GREEN}✓ Element ESS Admin工具安装完成${NC}"
    echo -e "${YELLOW}使用 'admin start' 启动服务${NC}"
    echo -e "${YELLOW}使用 'admin web' 打开管理界面${NC}"
}

# 卸载管理工具
uninstall_admin() {
    echo -e "${BLUE}卸载Element ESS Admin管理工具...${NC}"
    
    # 检查权限
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}错误: 卸载需要root权限${NC}"
        exit 1
    fi
    
    # 停止服务
    systemctl stop "${SERVICE_NAME}" 2>/dev/null || true
    systemctl disable "${SERVICE_NAME}" 2>/dev/null || true
    
    # 删除文件
    rm -f "$ADMIN_SCRIPT"
    rm -f "/etc/systemd/system/${SERVICE_NAME}.service"
    
    # 重载systemd
    systemctl daemon-reload
    
    echo -e "${GREEN}✓ Element ESS Admin工具已卸载${NC}"
}

# 启动服务
start_service() {
    check_installation
    
    echo -e "${BLUE}启动Element ESS Admin服务...${NC}"
    systemctl start "${SERVICE_NAME}"
    
    if systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "${GREEN}✓ 服务启动成功${NC}"
        echo -e "${YELLOW}管理界面: http://localhost:${ADMIN_PORT}${NC}"
    else
        echo -e "${RED}✗ 服务启动失败${NC}"
        systemctl status "${SERVICE_NAME}"
        exit 1
    fi
}

# 停止服务
stop_service() {
    check_installation
    
    echo -e "${BLUE}停止Element ESS Admin服务...${NC}"
    systemctl stop "${SERVICE_NAME}"
    
    if ! systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "${GREEN}✓ 服务已停止${NC}"
    else
        echo -e "${RED}✗ 服务停止失败${NC}"
        exit 1
    fi
}

# 重启服务
restart_service() {
    check_installation
    
    echo -e "${BLUE}重启Element ESS Admin服务...${NC}"
    systemctl restart "${SERVICE_NAME}"
    
    if systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "${GREEN}✓ 服务重启成功${NC}"
        echo -e "${YELLOW}管理界面: http://localhost:${ADMIN_PORT}${NC}"
    else
        echo -e "${RED}✗ 服务重启失败${NC}"
        systemctl status "${SERVICE_NAME}"
        exit 1
    fi
}

# 查看服务状态
show_status() {
    check_installation
    
    echo -e "${BLUE}Element ESS Admin服务状态:${NC}"
    systemctl status "${SERVICE_NAME}" --no-pager
    
    if systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "\n${GREEN}服务正在运行${NC}"
        echo -e "${YELLOW}管理界面: http://localhost:${ADMIN_PORT}${NC}"
    else
        echo -e "\n${RED}服务未运行${NC}"
    fi
}

# 查看日志
show_logs() {
    check_installation
    
    echo -e "${BLUE}Element ESS Admin服务日志:${NC}"
    journalctl -u "${SERVICE_NAME}" -f --no-pager
}

# 在浏览器中打开
open_web() {
    check_installation
    
    if ! systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "${YELLOW}服务未运行，正在启动...${NC}"
        start_service
        sleep 2
    fi
    
    url="http://localhost:${ADMIN_PORT}"
    echo -e "${BLUE}打开管理界面: $url${NC}"
    
    # 尝试不同的浏览器
    if command -v xdg-open > /dev/null; then
        xdg-open "$url"
    elif command -v open > /dev/null; then
        open "$url"
    else
        echo -e "${YELLOW}请手动访问: $url${NC}"
    fi
}

# 用户管理
manage_users() {
    check_installation
    
    case "${2:-list}" in
        list)
            echo -e "${BLUE}获取用户列表...${NC}"
            python3 "$ADMIN_SCRIPT" --action=list_users
            ;;
        create)
            if [[ -z "$3" ]]; then
                echo -e "${RED}错误: 请提供用户名${NC}"
                echo "用法: admin user create <username> [password]"
                exit 1
            fi
            username="$3"
            password="${4:-$(openssl rand -base64 12)}"
            echo -e "${BLUE}创建用户: $username${NC}"
            python3 "$ADMIN_SCRIPT" --action=create_user --username="$username" --password="$password"
            echo -e "${YELLOW}用户密码: $password${NC}"
            ;;
        delete)
            if [[ -z "$3" ]]; then
                echo -e "${RED}错误: 请提供用户名${NC}"
                echo "用法: admin user delete <username>"
                exit 1
            fi
            username="$3"
            echo -e "${BLUE}删除用户: $username${NC}"
            python3 "$ADMIN_SCRIPT" --action=delete_user --username="$username"
            ;;
        *)
            echo -e "${RED}错误: 未知的用户管理命令${NC}"
            echo "可用命令: list, create, delete"
            exit 1
            ;;
    esac
}

# 服务管理
manage_services() {
    check_installation
    
    case "${2:-status}" in
        status)
            echo -e "${BLUE}获取服务状态...${NC}"
            python3 "$ADMIN_SCRIPT" --action=service_status
            ;;
        restart)
            if [[ -z "$3" ]]; then
                echo -e "${RED}错误: 请提供服务名称${NC}"
                echo "用法: admin service restart <service_name>"
                exit 1
            fi
            service_name="$3"
            echo -e "${BLUE}重启服务: $service_name${NC}"
            python3 "$ADMIN_SCRIPT" --action=restart_service --service="$service_name"
            ;;
        logs)
            service_name="${3:-all}"
            echo -e "${BLUE}查看服务日志: $service_name${NC}"
            if [[ "$service_name" == "all" ]]; then
                docker-compose -f /opt/element-ess/docker-compose.yml logs -f
            else
                docker-compose -f /opt/element-ess/docker-compose.yml logs -f "$service_name"
            fi
            ;;
        *)
            echo -e "${RED}错误: 未知的服务管理命令${NC}"
            echo "可用命令: status, restart, logs"
            exit 1
            ;;
    esac
}

# 备份管理
manage_backups() {
    check_installation
    
    case "${2:-list}" in
        list)
            echo -e "${BLUE}备份列表:${NC}"
            ls -la /opt/element-ess/backups/ 2>/dev/null || echo "暂无备份文件"
            ;;
        create)
            echo -e "${BLUE}创建备份...${NC}"
            /usr/local/bin/element-ess-backup.sh
            ;;
        restore)
            if [[ -z "$3" ]]; then
                echo -e "${RED}错误: 请提供备份文件路径${NC}"
                echo "用法: admin backup restore <backup_file>"
                exit 1
            fi
            backup_file="$3"
            echo -e "${BLUE}恢复备份: $backup_file${NC}"
            echo -e "${YELLOW}备份恢复功能正在开发中...${NC}"
            ;;
        *)
            echo -e "${RED}错误: 未知的备份管理命令${NC}"
            echo "可用命令: list, create, restore"
            exit 1
            ;;
    esac
}

# 显示版本信息
show_version() {
    echo "Element ESS Admin管理工具 v2.1"
    echo "基于Element Server Suite构建"
    echo ""
    if check_installation &>/dev/null; then
        echo "安装状态: 已安装"
        if systemctl is-active --quiet "${SERVICE_NAME}"; then
            echo "服务状态: 运行中"
        else
            echo "服务状态: 已停止"
        fi
    else
        echo "安装状态: 未安装"
    fi
}

# 解析命令行参数
while [[ $# -gt 0 ]]; do
    case $1 in
        --port)
            ADMIN_PORT="$2"
            shift 2
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            break
            ;;
    esac
done

# 主命令处理
case "${1:-help}" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    web)
        open_web
        ;;
    user)
        manage_users "$@"
        ;;
    service)
        manage_services "$@"
        ;;
    backup)
        manage_backups "$@"
        ;;
    install)
        install_admin
        ;;
    uninstall)
        uninstall_admin
        ;;
    version)
        show_version
        ;;
    help|--help|*)
        show_help
        exit 0
        ;;
esac
